Adding Model Methods 

class Pet(db.Model):
    """Pet."""

    __tablename__ = "pets"

    id = db.Column(db.Integer,
                   primary_key=True,
                   autoincrement=True)
    name = db.Column(db.String(50),
                     nullable=False,
                     unique=True)
    species = db.Column(db.String(30), nullable=True)
    hunger = db.Column(db.Integer, nullable=False, default=20)

    def greet(self):
        """Greet using name."""

        return f"I'm {self.name} the {self.species or 'thing'}"

    def feed(self, units=10):
        """Nom nom nom."""

        self.hunger -= units
        self.hunger = max(self.hunger, 0)

    def __repr__(self):
        """Show info about pet."""

        p = self
        return f"<Pet id={p.id} name={p.name} species= {p.species} hunger={p.hunger}>"

    @classmethod
    def get_by_species(cls, species):
        """Get all pets matching that species."""

        return cls.query.filter_by(species=species).all()


Using the greet() function in ipython:

animal = Pet.query.get(4)

animal.greet()
"I'm Yuma the Dog"

all_pets= Pet.query.all()

for p in all_pets:
    print(p.greet())

I'm Stevie Chicks the Chicken
I'm Rocky the Bully
I'm Yuma the Dog
I'm King the Criollo
I'm Blue Sanchez the Cat    



Using the feed() function in ipython:

 king= Pet.query.get(5)
  king.feed()

  db.session.add(king)
  db.session.commit()



  MODEL CLASS METHODS 

  @classmethod
    def get_by_species(cls, species):
        """Get all pets matching that species."""

        return cls.query.filter_by(species=species).all()



The reson we make this a classmethod , if we're retrieving all pets where species has dog or cat is vecause it doesnt operate in a particular pet, is not a method that is going to interact with id name species or hunger for a single instance of pet ,instead we call it  Pet.query.filter()......

in ipython:
Pet.get_by_species('Dog')
 [<Pet id=4 name=Yuma species= Dog hunger=20>]